2020-11-18 23:53:59,922 [24908] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-11-18 23:53:59,923 [24908] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-11-18 23:53:59,923 [24908] INFO     root:247: [JupyterRequire] Initializing comms.
2020-11-18 23:53:59,926 [24908] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-11-18 23:53:59,927 [24908] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-11-18 23:53:59,927 [24908] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-11-19 00:00:16,968 [3336] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-11-19 00:00:16,969 [3336] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-11-19 00:00:16,971 [3336] INFO     root:247: [JupyterRequire] Initializing comms.
2020-11-19 00:00:16,973 [3336] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-11-19 00:00:16,974 [3336] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-11-19 00:00:16,974 [3336] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-11-19 00:00:18,338 [3336] DEBUG    matplotlib:278: [JupyterRequire] CONFIGDIR=C:\Users\awyeh\.matplotlib
2020-11-19 00:00:18,340 [3336] DEBUG    matplotlib:278: [JupyterRequire] (private) matplotlib data path: Y:\Users\awyeh\anaconda3\envs\learn-env\lib\site-packages\matplotlib\mpl-data
2020-11-19 00:00:18,344 [3336] DEBUG    matplotlib:278: [JupyterRequire] matplotlib data path: Y:\Users\awyeh\anaconda3\envs\learn-env\lib\site-packages\matplotlib\mpl-data
2020-11-19 00:00:18,346 [3336] DEBUG    matplotlib:1009: [JupyterRequire] loaded rc file Y:\Users\awyeh\anaconda3\envs\learn-env\lib\site-packages\matplotlib\mpl-data\matplotlibrc
2020-11-19 00:00:18,347 [3336] DEBUG    matplotlib:1598: [JupyterRequire] matplotlib version 3.2.2
2020-11-19 00:00:18,347 [3336] DEBUG    matplotlib:1599: [JupyterRequire] interactive is False
2020-11-19 00:00:18,348 [3336] DEBUG    matplotlib:1600: [JupyterRequire] platform is win32
2020-11-19 00:00:18,348 [3336] DEBUG    matplotlib:1601: [JupyterRequire] loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', '_bootlocale', '_locale', 'encodings.cp932', '_codecs_jp', '_multibytecodec', 'site', 'os', 'errno', 'stat', '_stat', 'ntpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'google', 'google.cloud', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', '__future__', 'json', 'json.decoder', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'msvcrt', '_winapi', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'posixpath', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'traitlets', 'traitlets.traitlets', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'six', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'textwrap', 'gettext', 'ipython_genutils.path', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_win32', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'typing', 'typing.io', 'typing.re', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'IPython.core.interactiveshell', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'asyncio', 'selectors', 'select', '_socket', '_overlapped', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'queue', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'socket', '__mp_main__', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.windows_events', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.sslproto', 'ssl', 'ipaddress', '_ssl', 'base64', 'asyncio.selector_events', 'asyncio.windows_utils', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.dummy_contextvars', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop.async_context_manager', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.vt100', 'array', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso._compatibility', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'parso.file_io', 'jedi._compatibility', 'jedi.file_io', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.inference', 'jedi.inference.imports', 'jedi.inference.sys_path', 'jedi.inference.cache', 'jedi.inference.base_value', 'jedi.common', 'jedi.common.value', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.common.utils', 'jedi.inference.compiled', 'jedi.inference.compiled.value', 'jedi.inference.filters', 'jedi.inference.flow_analysis', 'jedi.inference.recursion', 'jedi.inference.names', 'jedi.inference.docstrings', 'jedi.inference.lazy_value', 'jedi.plugins', 'jedi.inference.compiled.access', 'jedi.inference.compiled.getattr_static', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.gradual.typeshed', 'jedi.inference.gradual.stub_value', 'jedi.inference.value', 'jedi.inference.value.module', 'jedi.inference.value.klass', 'jedi.inference.arguments', 'jedi.inference.value.iterable', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.function', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.instance', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.syntax_tree', 'jedi.inference.gradual.annotation', 'jedi.inference.param', 'jedi.inference.value.decorator', 'jedi.inference.gradual.conversion', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.interpreter', 'jedi.inference.compiled.mixed', 'jedi.api.completion', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.environment', 'filecmp', 'jedi.inference.compiled.subprocess', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.inference.references', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.plugins.registry', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.lib.clipboard', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', 'nturl2path', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'optparse', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_17', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'distutils', 'distutils.util', 'distutils.errors', 'distutils.dep_util', 'distutils.spawn', 'distutils.debug', 'distutils.log', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'zmq.asyncio', 'zmq._future', 'jupyter_client.asynchronous.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ctypes.util', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'tornado.stack_context', 'tornado.platform', 'tornado.platform.auto', 'tornado.platform.common', 'tornado.platform.interface', 'tornado.platform.windows', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.eventloops', 'distutils.version', 'ipykernel.parentpoller', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'IPython.core.completerlib', 'storemagic', 'jupyter_require', 'daiquiri', 'logging.config', 'socketserver', 'daiquiri.output', 'daiquiri.formatter', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.handlers', 'jupyter_require.__about__', 'jupyter_require.notebook', 'csscompressor', 'jupyter_require.core', 'jupyter_require.magic', 'jupyter_nbutils', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'mkl', 'mkl._mklinit', 'mkl._py_mkl_service', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_21', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.nattype', '_cython_0_29_13', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.ccalendar', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.lib', 'fractions', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.arrays', 'pandas.core.arrays.array_', 'pandas.core.dtypes', 'pandas.core.dtypes.common', 'pandas._libs.algos', 'pandas.core.dtypes.dtypes', 'pandas._libs.interval', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.inference', 'pandas._typing', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.core.dtypes.missing', 'pandas.util._validators', 'pandas.core.ops', 'pandas._libs.ops', 'pandas.core.common', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.docstrings', 'pandas.core.sorting', 'pandas.core.algorithms', 'pandas.core.indexers', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.core.nanops', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.tseries.offsets', 'dateutil.easter', 'pandas.core.tools', 'pandas.core.tools.datetimes', 'pandas.core.arrays._ranges', 'pandas.core.arrays.integer', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.io.formats.printing', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.sparse', 'pandas._libs.sparse', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.index', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.numeric', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas.core.internals.arrays', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.io.formats.format', 'pandas.io.common', 'csv', '_csv', 'gzip', 'mmap', 'zipfile', 'pandas.core.internals.construction', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._matplotlib', 'pandas.plotting._matplotlib.boxplot', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2020-11-19 00:00:18,411 [3336] DEBUG    matplotlib:278: [JupyterRequire] CACHEDIR=C:\Users\awyeh\.matplotlib
2020-11-19 00:00:18,417 [3336] DEBUG    matplotlib.font_manager:1348: [JupyterRequire] Using fontManager instance from C:\Users\awyeh\.matplotlib\fontlist-v310.json
2020-11-19 00:00:18,768 [3336] DEBUG    matplotlib.pyplot:225: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2020-11-19 00:00:18,774 [3336] DEBUG    matplotlib.pyplot:225: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2020-11-19 00:00:21,542 [3336] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-11-19 00:00:21,543 [3336] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-11-19 00:00:21,543 [3336] INFO     root:247: [JupyterRequire] Initializing comms.
2020-11-19 00:00:21,545 [3336] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-11-19 00:00:21,546 [3336] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-11-19 00:00:21,546 [3336] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-11-19 00:10:09,787 [24116] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-11-19 00:10:09,788 [24116] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-11-19 00:10:09,788 [24116] INFO     root:247: [JupyterRequire] Initializing comms.
2020-11-19 00:10:09,791 [24116] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-11-19 00:10:09,791 [24116] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-11-19 00:10:09,792 [24116] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-11-19 00:10:10,745 [24116] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-11-19 00:10:10,745 [24116] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-11-19 00:10:10,745 [24116] INFO     root:247: [JupyterRequire] Initializing comms.
2020-11-19 00:10:10,748 [24116] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-11-19 00:10:10,749 [24116] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-11-19 00:10:10,750 [24116] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-11-19 00:10:17,045 [24116] DEBUG    matplotlib:278: [JupyterRequire] CONFIGDIR=C:\Users\awyeh\.matplotlib
2020-11-19 00:10:17,046 [24116] DEBUG    matplotlib:278: [JupyterRequire] (private) matplotlib data path: Y:\Users\awyeh\anaconda3\envs\learn-env\lib\site-packages\matplotlib\mpl-data
2020-11-19 00:10:17,052 [24116] DEBUG    matplotlib:278: [JupyterRequire] matplotlib data path: Y:\Users\awyeh\anaconda3\envs\learn-env\lib\site-packages\matplotlib\mpl-data
2020-11-19 00:10:17,052 [24116] DEBUG    matplotlib:1009: [JupyterRequire] loaded rc file Y:\Users\awyeh\anaconda3\envs\learn-env\lib\site-packages\matplotlib\mpl-data\matplotlibrc
2020-11-19 00:10:17,055 [24116] DEBUG    matplotlib:1598: [JupyterRequire] matplotlib version 3.2.2
2020-11-19 00:10:17,055 [24116] DEBUG    matplotlib:1599: [JupyterRequire] interactive is False
2020-11-19 00:10:17,055 [24116] DEBUG    matplotlib:1600: [JupyterRequire] platform is win32
2020-11-19 00:10:17,056 [24116] DEBUG    matplotlib:1601: [JupyterRequire] loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', '_bootlocale', '_locale', 'encodings.cp932', '_codecs_jp', '_multibytecodec', 'site', 'os', 'errno', 'stat', '_stat', 'ntpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'google', 'google.cloud', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', '__future__', 'json', 'json.decoder', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'msvcrt', '_winapi', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'posixpath', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'traitlets', 'traitlets.traitlets', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'six', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'textwrap', 'gettext', 'ipython_genutils.path', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_win32', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'typing', 'typing.io', 'typing.re', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'IPython.core.interactiveshell', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'asyncio', 'selectors', 'select', '_socket', '_overlapped', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'queue', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'socket', '__mp_main__', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.windows_events', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.sslproto', 'ssl', 'ipaddress', '_ssl', 'base64', 'asyncio.selector_events', 'asyncio.windows_utils', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.dummy_contextvars', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop.async_context_manager', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.vt100', 'array', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso._compatibility', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'parso.file_io', 'jedi._compatibility', 'jedi.file_io', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.inference', 'jedi.inference.imports', 'jedi.inference.sys_path', 'jedi.inference.cache', 'jedi.inference.base_value', 'jedi.common', 'jedi.common.value', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.common.utils', 'jedi.inference.compiled', 'jedi.inference.compiled.value', 'jedi.inference.filters', 'jedi.inference.flow_analysis', 'jedi.inference.recursion', 'jedi.inference.names', 'jedi.inference.docstrings', 'jedi.inference.lazy_value', 'jedi.plugins', 'jedi.inference.compiled.access', 'jedi.inference.compiled.getattr_static', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.gradual.typeshed', 'jedi.inference.gradual.stub_value', 'jedi.inference.value', 'jedi.inference.value.module', 'jedi.inference.value.klass', 'jedi.inference.arguments', 'jedi.inference.value.iterable', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.function', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.instance', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.syntax_tree', 'jedi.inference.gradual.annotation', 'jedi.inference.param', 'jedi.inference.value.decorator', 'jedi.inference.gradual.conversion', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.interpreter', 'jedi.inference.compiled.mixed', 'jedi.api.completion', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.environment', 'filecmp', 'jedi.inference.compiled.subprocess', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.inference.references', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.plugins.registry', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.lib.clipboard', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', 'nturl2path', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'optparse', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_17', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'distutils', 'distutils.util', 'distutils.errors', 'distutils.dep_util', 'distutils.spawn', 'distutils.debug', 'distutils.log', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'zmq.asyncio', 'zmq._future', 'jupyter_client.asynchronous.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ctypes.util', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'tornado.stack_context', 'tornado.platform', 'tornado.platform.auto', 'tornado.platform.common', 'tornado.platform.interface', 'tornado.platform.windows', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.eventloops', 'distutils.version', 'ipykernel.parentpoller', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'IPython.core.completerlib', 'storemagic', 'jupyter_require', 'daiquiri', 'logging.config', 'socketserver', 'daiquiri.output', 'daiquiri.formatter', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.handlers', 'jupyter_require.__about__', 'jupyter_require.notebook', 'csscompressor', 'jupyter_require.core', 'jupyter_require.magic', 'jupyter_nbutils', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'mkl', 'mkl._mklinit', 'mkl._py_mkl_service', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_21', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.nattype', '_cython_0_29_13', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.ccalendar', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.lib', 'fractions', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.arrays', 'pandas.core.arrays.array_', 'pandas.core.dtypes', 'pandas.core.dtypes.common', 'pandas._libs.algos', 'pandas.core.dtypes.dtypes', 'pandas._libs.interval', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.inference', 'pandas._typing', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.core.dtypes.missing', 'pandas.util._validators', 'pandas.core.ops', 'pandas._libs.ops', 'pandas.core.common', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.docstrings', 'pandas.core.sorting', 'pandas.core.algorithms', 'pandas.core.indexers', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.core.nanops', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.tseries.offsets', 'dateutil.easter', 'pandas.core.tools', 'pandas.core.tools.datetimes', 'pandas.core.arrays._ranges', 'pandas.core.arrays.integer', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.io.formats.printing', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.sparse', 'pandas._libs.sparse', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.index', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.numeric', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas.core.internals.arrays', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.io.formats.format', 'pandas.io.common', 'csv', '_csv', 'gzip', 'mmap', 'zipfile', 'pandas.core.internals.construction', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._matplotlib', 'pandas.plotting._matplotlib.boxplot', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2020-11-19 00:10:17,119 [24116] DEBUG    matplotlib:278: [JupyterRequire] CACHEDIR=C:\Users\awyeh\.matplotlib
2020-11-19 00:10:17,125 [24116] DEBUG    matplotlib.font_manager:1348: [JupyterRequire] Using fontManager instance from C:\Users\awyeh\.matplotlib\fontlist-v310.json
2020-11-19 00:10:17,493 [24116] DEBUG    matplotlib.pyplot:225: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2020-11-19 00:10:17,502 [24116] DEBUG    matplotlib.pyplot:225: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2020-11-19 02:46:54,932 [2836] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-11-19 02:46:54,932 [2836] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-11-19 02:46:54,933 [2836] INFO     root:247: [JupyterRequire] Initializing comms.
2020-11-19 02:46:54,935 [2836] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-11-19 02:46:54,937 [2836] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-11-19 02:46:54,937 [2836] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-11-19 02:59:45,492 [2836] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-11-19 02:59:45,492 [2836] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-11-19 02:59:45,492 [2836] INFO     root:247: [JupyterRequire] Initializing comms.
2020-11-19 02:59:45,496 [2836] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-11-19 02:59:45,497 [2836] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-11-19 02:59:45,497 [2836] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-11-19 02:59:46,434 [2836] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-11-19 02:59:46,434 [2836] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-11-19 02:59:46,434 [2836] INFO     root:247: [JupyterRequire] Initializing comms.
2020-11-19 02:59:46,437 [2836] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-11-19 02:59:46,437 [2836] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-11-19 02:59:46,438 [2836] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-11-19 20:46:19,642 [1448] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-11-19 20:46:19,645 [1448] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-11-19 20:46:19,645 [1448] INFO     root:247: [JupyterRequire] Initializing comms.
2020-11-19 20:46:19,648 [1448] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-11-19 20:46:19,649 [1448] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-11-19 20:46:19,649 [1448] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-11-19 20:46:20,475 [1448] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-11-19 20:46:20,475 [1448] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-11-19 20:46:20,475 [1448] INFO     root:247: [JupyterRequire] Initializing comms.
2020-11-19 20:46:20,478 [1448] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-11-19 20:46:20,479 [1448] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-11-19 20:46:20,479 [1448] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-11-19 20:55:03,853 [1448] DEBUG    matplotlib:278: [JupyterRequire] CONFIGDIR=C:\Users\awyeh\.matplotlib
2020-11-19 20:55:03,854 [1448] DEBUG    matplotlib:278: [JupyterRequire] (private) matplotlib data path: Y:\Users\awyeh\anaconda3\envs\learn-env\lib\site-packages\matplotlib\mpl-data
2020-11-19 20:55:03,859 [1448] DEBUG    matplotlib:278: [JupyterRequire] matplotlib data path: Y:\Users\awyeh\anaconda3\envs\learn-env\lib\site-packages\matplotlib\mpl-data
2020-11-19 20:55:03,860 [1448] DEBUG    matplotlib:1009: [JupyterRequire] loaded rc file Y:\Users\awyeh\anaconda3\envs\learn-env\lib\site-packages\matplotlib\mpl-data\matplotlibrc
2020-11-19 20:55:03,862 [1448] DEBUG    matplotlib:1598: [JupyterRequire] matplotlib version 3.2.2
2020-11-19 20:55:03,863 [1448] DEBUG    matplotlib:1599: [JupyterRequire] interactive is False
2020-11-19 20:55:03,863 [1448] DEBUG    matplotlib:1600: [JupyterRequire] platform is win32
2020-11-19 20:55:03,864 [1448] DEBUG    matplotlib:1601: [JupyterRequire] loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', '_bootlocale', '_locale', 'encodings.cp932', '_codecs_jp', '_multibytecodec', 'site', 'os', 'errno', 'stat', '_stat', 'ntpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'google', 'google.cloud', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', '__future__', 'json', 'json.decoder', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'msvcrt', '_winapi', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'posixpath', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'traitlets', 'traitlets.traitlets', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'six', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'textwrap', 'gettext', 'ipython_genutils.path', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_win32', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'typing', 'typing.io', 'typing.re', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'IPython.core.interactiveshell', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'asyncio', 'selectors', 'select', '_socket', '_overlapped', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'queue', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'socket', '__mp_main__', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.windows_events', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.sslproto', 'ssl', 'ipaddress', '_ssl', 'base64', 'asyncio.selector_events', 'asyncio.windows_utils', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.dummy_contextvars', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop.async_context_manager', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.vt100', 'array', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso._compatibility', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'parso.file_io', 'jedi._compatibility', 'jedi.file_io', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.inference', 'jedi.inference.imports', 'jedi.inference.sys_path', 'jedi.inference.cache', 'jedi.inference.base_value', 'jedi.common', 'jedi.common.value', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.common.utils', 'jedi.inference.compiled', 'jedi.inference.compiled.value', 'jedi.inference.filters', 'jedi.inference.flow_analysis', 'jedi.inference.recursion', 'jedi.inference.names', 'jedi.inference.docstrings', 'jedi.inference.lazy_value', 'jedi.plugins', 'jedi.inference.compiled.access', 'jedi.inference.compiled.getattr_static', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.gradual.typeshed', 'jedi.inference.gradual.stub_value', 'jedi.inference.value', 'jedi.inference.value.module', 'jedi.inference.value.klass', 'jedi.inference.arguments', 'jedi.inference.value.iterable', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.function', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.instance', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.syntax_tree', 'jedi.inference.gradual.annotation', 'jedi.inference.param', 'jedi.inference.value.decorator', 'jedi.inference.gradual.conversion', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.interpreter', 'jedi.inference.compiled.mixed', 'jedi.api.completion', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.environment', 'filecmp', 'jedi.inference.compiled.subprocess', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.inference.references', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.plugins.registry', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.lib.clipboard', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', 'nturl2path', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'optparse', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_17', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'distutils', 'distutils.util', 'distutils.errors', 'distutils.dep_util', 'distutils.spawn', 'distutils.debug', 'distutils.log', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'zmq.asyncio', 'zmq._future', 'jupyter_client.asynchronous.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ctypes.util', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'tornado.stack_context', 'tornado.platform', 'tornado.platform.auto', 'tornado.platform.common', 'tornado.platform.interface', 'tornado.platform.windows', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.eventloops', 'distutils.version', 'ipykernel.parentpoller', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'IPython.core.completerlib', 'storemagic', 'jupyter_require', 'daiquiri', 'logging.config', 'socketserver', 'daiquiri.output', 'daiquiri.formatter', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.handlers', 'jupyter_require.__about__', 'jupyter_require.notebook', 'csscompressor', 'jupyter_require.core', 'jupyter_require.magic', 'jupyter_nbutils', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'mkl', 'mkl._mklinit', 'mkl._py_mkl_service', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random.bit_generator', '_cython_0_29_21', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.nattype', '_cython_0_29_13', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.ccalendar', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.lib', 'fractions', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.arrays', 'pandas.core.arrays.array_', 'pandas.core.dtypes', 'pandas.core.dtypes.common', 'pandas._libs.algos', 'pandas.core.dtypes.dtypes', 'pandas._libs.interval', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.inference', 'pandas._typing', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.core.dtypes.missing', 'pandas.util._validators', 'pandas.core.ops', 'pandas._libs.ops', 'pandas.core.common', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.docstrings', 'pandas.core.sorting', 'pandas.core.algorithms', 'pandas.core.indexers', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.core.nanops', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.tseries.offsets', 'dateutil.easter', 'pandas.core.tools', 'pandas.core.tools.datetimes', 'pandas.core.arrays._ranges', 'pandas.core.arrays.integer', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.io.formats.printing', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.sparse', 'pandas._libs.sparse', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.index', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.numeric', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas.core.internals.arrays', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.io.formats.format', 'pandas.io.common', 'csv', '_csv', 'gzip', 'mmap', 'zipfile', 'pandas.core.internals.construction', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._matplotlib', 'pandas.plotting._matplotlib.boxplot', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2020-11-19 20:55:03,931 [1448] DEBUG    matplotlib:278: [JupyterRequire] CACHEDIR=C:\Users\awyeh\.matplotlib
2020-11-19 20:55:03,938 [1448] DEBUG    matplotlib.font_manager:1348: [JupyterRequire] Using fontManager instance from C:\Users\awyeh\.matplotlib\fontlist-v310.json
2020-11-19 20:55:08,679 [1448] WARNING  py.warnings:99: [JupyterRequire] Y:\Users\awyeh\anaconda3\envs\learn-env\lib\site-packages\pandas\core\generic.py:6287: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  self._update_inplace(new_data)

2020-11-20 10:09:14,405 [1448] DEBUG    matplotlib.pyplot:225: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2020-11-20 10:09:14,407 [1448] DEBUG    matplotlib.pyplot:225: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2020-11-20 10:12:21,500 [1448] DEBUG    matplotlib.font_manager:1246: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2020-11-20 10:12:21,501 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,502 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,502 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,502 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,502 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
2020-11-20 10:12:21,503 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,503 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,503 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2020-11-20 10:12:21,503 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,504 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,504 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,504 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,505 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,505 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,505 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,505 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,506 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,506 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,506 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,507 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,507 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,507 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,507 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-11-20 10:12:21,508 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-11-20 10:12:21,508 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,508 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,508 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,509 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,509 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,509 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,510 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,510 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,510 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-11-20 10:12:21,511 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,511 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,511 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,511 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,512 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-11-20 10:12:21,512 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal book normal>) = 10.05
2020-11-20 10:12:21,512 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,513 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,513 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,513 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,513 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'David CLM' (DavidCLM-Medium.ttf) normal normal medium normal>) = 10.145
2020-11-20 10:12:21,514 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Naskh Arabic' (NotoNaskhArabic-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,514 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,514 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'EmojiOne Color' (EmojiOneColor-SVGinOT.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,514 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Serif' (NotoSerif-CondensedBoldItalic.ttf) italic normal bold condensed>) = 11.535
2020-11-20 10:12:21,515 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,515 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Code Pro' (SourceCodePro-ExtraLightIt.ttf) italic normal light normal>) = 11.24
2020-11-20 10:12:21,515 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,516 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,516 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,516 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'BIZ UDGothic' (BIZ-UDGothicB.ttc) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,516 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Code Pro' (SourceCodePro-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,517 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,517 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,517 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,517 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
2020-11-20 10:12:21,518 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2020-11-20 10:12:21,518 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,518 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,519 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Sans' (NotoSans-Light.ttf) normal normal light normal>) = 10.24
2020-11-20 10:12:21,519 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal bold condensed>) = 10.535
2020-11-20 10:12:21,519 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
2020-11-20 10:12:21,519 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,520 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Serif' (NotoSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,520 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal book normal>) = 10.05
2020-11-20 10:12:21,520 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal light normal>) = 10.24
2020-11-20 10:12:21,521 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,521 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Mincho' (yumin.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,521 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal book normal>) = 11.05
2020-11-20 10:12:21,521 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,522 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,522 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,522 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,523 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Serif' (NotoSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,523 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,523 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,523 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Code Pro' (SourceCodePro-ExtraLight.ttf) normal normal light normal>) = 10.24
2020-11-20 10:12:21,524 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Linux Biolinum G' (LinBiolinum_R_G.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,524 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Sans Pro' (SourceSansPro-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,524 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2020-11-20 10:12:21,524 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,525 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Serif Lao' (NotoSerifLao-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,525 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal bold condensed>) = 11.535
2020-11-20 10:12:21,525 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,525 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2020-11-20 10:12:21,526 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Amiri Quran' (AmiriQuran.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,526 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,526 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,527 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,527 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Frank Ruehl CLM' (FrankRuehlCLM-MediumOblique.ttf) oblique normal medium normal>) = 11.145
2020-11-20 10:12:21,527 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,528 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
2020-11-20 10:12:21,528 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,528 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,529 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,529 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,529 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal book normal>) = 10.05
2020-11-20 10:12:21,530 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,530 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Linux Libertine G' (LinLibertine_RBI_G.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,530 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,531 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,531 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,531 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,532 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Sans Hebrew' (NotoSansHebrew-Regular.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,532 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,532 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Amiri' (Amiri-BoldSlanted.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,532 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Serif Pro' (SourceSerifPro-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,533 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,533 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,533 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,534 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
2020-11-20 10:12:21,534 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,534 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,535 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,535 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Carlito' (Carlito-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,535 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,535 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,536 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-11-20 10:12:21,536 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-11-20 10:12:21,536 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal book normal>) = 10.05
2020-11-20 10:12:21,537 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,537 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,537 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,537 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal light normal>) = 10.24
2020-11-20 10:12:21,538 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian-Regular.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,538 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,538 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal bold condensed>) = 7.8986363636363635
2020-11-20 10:12:21,539 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,539 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,539 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,539 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Serif Pro' (SourceSerifPro-It.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,540 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Serif Georgian' (NotoSerifGeorgian-Regular.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,540 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,540 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal bold normal>) = 11.335
2020-11-20 10:12:21,541 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,541 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Code Pro' (SourceCodePro-Semibold.ttf) normal normal semibold normal>) = 10.24
2020-11-20 10:12:21,541 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal book normal>) = 10.05
2020-11-20 10:12:21,542 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,542 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Linux Libertine G' (LinLibertine_RZ_G.ttf) normal normal semibold normal>) = 10.24
2020-11-20 10:12:21,542 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
2020-11-20 10:12:21,543 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,543 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal book normal>) = 11.05
2020-11-20 10:12:21,543 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,544 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal book normal>) = 10.05
2020-11-20 10:12:21,544 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal demi condensed>) = 10.44
2020-11-20 10:12:21,544 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Frank Ruhl Hofshi' (FrankRuhlHofshi-Bold.otf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,545 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Code Pro' (SourceCodePro-BlackIt.ttf) italic normal black normal>) = 11.525
2020-11-20 10:12:21,545 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,545 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal bold normal>) = 7.698636363636363
2020-11-20 10:12:21,546 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'UD Digi Kyokasho N-B' (UDDigiKyokashoN-B.ttc) normal normal 700 normal>) = 10.335
2020-11-20 10:12:21,546 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
2020-11-20 10:12:21,546 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,547 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,547 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Sans' (NotoSans-Condensed.ttf) normal normal 400 condensed>) = 10.25
2020-11-20 10:12:21,547 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,548 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Sans Pro' (SourceSansPro-ExtraLight.ttf) normal normal light normal>) = 10.24
2020-11-20 10:12:21,548 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,548 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,549 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,549 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,549 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Sans' (NotoSans-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,549 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Sans Georgian' (NotoSansGeorgian-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,550 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Sans Pro' (SourceSansPro-LightIt.ttf) italic normal light normal>) = 11.24
2020-11-20 10:12:21,550 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,550 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,551 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rubik' (Rubik-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,551 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal heavy normal>) = 11.43
2020-11-20 10:12:21,551 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,552 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal book normal>) = 11.05
2020-11-20 10:12:21,552 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal demibold normal>) = 11.24
2020-11-20 10:12:21,552 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,552 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Alef' (Alef-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,553 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Serif Pro' (SourceSerifPro-ExtraLightIt.ttf) italic normal light normal>) = 11.24
2020-11-20 10:12:21,553 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,554 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal bold condensed>) = 0.5349999999999999
2020-11-20 10:12:21,554 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,554 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Serif' (NotoSerif-CondensedBold.ttf) normal normal bold condensed>) = 10.535
2020-11-20 10:12:21,554 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,555 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,555 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2020-11-20 10:12:21,555 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
2020-11-20 10:12:21,556 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,556 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,556 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,556 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,557 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Serif' (NotoSerif-CondensedItalic.ttf) italic normal 400 condensed>) = 11.25
2020-11-20 10:12:21,557 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,557 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nachlieli CLM' (NachlieliCLM-LightOblique.otf) oblique normal light normal>) = 11.24
2020-11-20 10:12:21,558 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Serif Pro' (SourceSerifPro-ExtraLight.ttf) normal normal light normal>) = 10.24
2020-11-20 10:12:21,558 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
2020-11-20 10:12:21,558 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal black normal>) = 10.525
2020-11-20 10:12:21,558 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Serif Pro' (SourceSerifPro-Black.ttf) normal normal black normal>) = 10.525
2020-11-20 10:12:21,559 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Serif' (NotoSerif-Light.ttf) normal normal light normal>) = 10.24
2020-11-20 10:12:21,559 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,560 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nachlieli CLM' (NachlieliCLM-Bold.otf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,560 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Scheherazade' (Scheherazade-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,560 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,561 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Sans' (NotoSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,561 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,561 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,562 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Linux Libertine Display G' (LinLibertine_DR_G.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,562 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,562 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Math TeX Gyre' (DejaVuMathTeXGyre.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,563 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,563 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
2020-11-20 10:12:21,563 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2020-11-20 10:12:21,564 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Caladea' (Caladea-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,564 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Carlito' (Carlito-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,564 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,564 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Caladea' (Caladea-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,565 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,565 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Naskh Arabic UI' (NotoNaskhArabicUI-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,565 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Code Pro' (SourceCodePro-Medium.ttf) normal normal medium normal>) = 10.145
2020-11-20 10:12:21,566 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,566 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,566 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2020-11-20 10:12:21,567 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2020-11-20 10:12:21,567 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Serif Georgian' (NotoSerifGeorgian-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,567 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,567 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Amiri' (Amiri-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,568 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2020-11-20 10:12:21,568 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,568 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,569 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2020-11-20 10:12:21,569 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,569 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Sans' (NotoSans-CondensedItalic.ttf) italic normal 400 condensed>) = 11.25
2020-11-20 10:12:21,570 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'David CLM' (DavidCLM-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,570 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Serif Pro' (SourceSerifPro-Semibold.ttf) normal normal semibold normal>) = 10.24
2020-11-20 10:12:21,570 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Sans Pro' (SourceSansPro-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,571 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal book normal>) = 11.05
2020-11-20 10:12:21,571 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Serif' (NotoSerif-LightItalic.ttf) italic normal light normal>) = 11.24
2020-11-20 10:12:21,571 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,571 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Linux Biolinum G' (LinBiolinum_RB_G.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,572 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,572 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,572 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,573 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2020-11-20 10:12:21,573 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Mincho' (yuminl.ttf) normal normal light normal>) = 10.24
2020-11-20 10:12:21,573 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,573 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,574 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,574 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,574 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,575 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,575 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,575 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
2020-11-20 10:12:21,575 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2020-11-20 10:12:21,576 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal light normal>) = 10.24
2020-11-20 10:12:21,576 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Frank Ruehl CLM' (FrankRuehlCLM-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-11-20 10:12:21,577 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal black normal>) = 10.525
2020-11-20 10:12:21,577 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,577 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,577 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,578 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,578 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal bold normal>) = 6.698636363636363
2020-11-20 10:12:21,578 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Sans' (NotoSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,579 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'David Libre' (DavidLibre-Regular.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,579 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'UD Digi Kyokasho N-R' (UDDigiKyokashoN-R.ttc) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,579 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
2020-11-20 10:12:21,580 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal demibold normal>) = 11.24
2020-11-20 10:12:21,580 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,581 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal book normal>) = 11.05
2020-11-20 10:12:21,581 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,581 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Meiryo' (meiryo.ttc) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,581 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal black normal>) = 10.525
2020-11-20 10:12:21,582 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal book normal>) = 10.05
2020-11-20 10:12:21,582 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Scheherazade' (Scheherazade-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,582 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2020-11-20 10:12:21,583 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal demi normal>) = 10.24
2020-11-20 10:12:21,583 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,583 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Miriam CLM' (MiriamCLM-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,583 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,584 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal bold condensed>) = 10.535
2020-11-20 10:12:21,584 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,584 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,584 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,585 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
2020-11-20 10:12:21,585 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,585 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Serif Armenian' (NotoSerifArmenian-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,585 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Serif Lao' (NotoSerifLao-Regular.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,586 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Sans' (NotoSans-CondensedBoldItalic.ttf) italic normal bold condensed>) = 11.535
2020-11-20 10:12:21,586 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,586 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,587 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,587 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,587 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal bold condensed>) = 10.535
2020-11-20 10:12:21,587 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
2020-11-20 10:12:21,588 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,588 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,588 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal bold normal>) = 3.9713636363636367
2020-11-20 10:12:21,589 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal heavy normal>) = 10.43
2020-11-20 10:12:21,589 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,589 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,589 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'BIZ UDGothic' (BIZ-UDGothicR.ttc) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,590 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,590 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,590 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Sans' (NotoSans-Regular.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,590 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,591 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,591 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,591 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Miriam Libre' (MiriamLibre-Regular.otf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,592 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Naskh Arabic UI' (NotoNaskhArabicUI-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,592 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
2020-11-20 10:12:21,592 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Sans Arabic UI' (NotoSansArabicUI-Regular.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,593 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Sans Pro' (SourceSansPro-It.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,593 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,593 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,594 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,594 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,594 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
2020-11-20 10:12:21,595 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,595 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rubik' (Rubik-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,595 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,596 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Sans Lao' (NotoSansLao-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,596 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,597 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,597 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal roman normal>) = 10.145
2020-11-20 10:12:21,597 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,597 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Mincho' (yumindb.ttf) normal normal demibold normal>) = 10.24
2020-11-20 10:12:21,598 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,598 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Code Pro' (SourceCodePro-It.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,598 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Serif Hebrew' (NotoSerifHebrew-Regular.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,598 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,599 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal bold condensed>) = 6.8986363636363635
2020-11-20 10:12:21,599 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Code Pro' (SourceCodePro-Black.ttf) normal normal black normal>) = 10.525
2020-11-20 10:12:21,599 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,600 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,600 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal roman normal>) = 11.145
2020-11-20 10:12:21,600 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal demi normal>) = 10.24
2020-11-20 10:12:21,600 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Code Pro' (SourceCodePro-MediumIt.ttf) italic normal medium normal>) = 11.145
2020-11-20 10:12:21,601 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,601 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Code Pro' (SourceCodePro-Light.ttf) normal normal light normal>) = 10.24
2020-11-20 10:12:21,601 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Sans Pro' (SourceSansPro-Light.ttf) normal normal light normal>) = 10.24
2020-11-20 10:12:21,602 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-11-20 10:12:21,602 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,602 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,602 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Sans Lao' (NotoSansLao-Regular.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,603 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Sans Pro' (SourceSansPro-Semibold.ttf) normal normal semibold normal>) = 10.24
2020-11-20 10:12:21,603 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,603 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,603 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,604 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Sans Pro' (SourceSansPro-BlackIt.ttf) italic normal black normal>) = 11.525
2020-11-20 10:12:21,604 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Linux Libertine G' (LinLibertine_R_G.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,604 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal book normal>) = 10.05
2020-11-20 10:12:21,605 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Sans Pro' (SourceSansPro-SemiboldIt.ttf) italic normal semibold normal>) = 11.24
2020-11-20 10:12:21,605 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,605 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Reem Kufi' (ReemKufi-Regular.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,606 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,606 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal light normal>) = 10.24
2020-11-20 10:12:21,606 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,606 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,607 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
2020-11-20 10:12:21,607 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,607 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal light normal>) = 10.24
2020-11-20 10:12:21,607 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Code Pro' (SourceCodePro-LightIt.ttf) italic normal light normal>) = 11.24
2020-11-20 10:12:21,608 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,608 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,608 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Code Pro' (SourceCodePro-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,609 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Serif Hebrew' (NotoSerifHebrew-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,609 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Serif Pro' (SourceSerifPro-LightIt.ttf) italic normal light normal>) = 11.24
2020-11-20 10:12:21,609 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,610 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,610 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,611 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Naskh Arabic' (NotoNaskhArabic-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,611 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal medium normal>) = 10.145
2020-11-20 10:12:21,611 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2020-11-20 10:12:21,611 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,612 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Carlito' (Carlito-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,612 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,612 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal roman normal>) = 10.145
2020-11-20 10:12:21,612 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,613 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Miriam Mono CLM' (MiriamMonoCLM-BookOblique.ttf) oblique normal book normal>) = 11.05
2020-11-20 10:12:21,613 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,613 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,613 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Frank Ruehl CLM' (FrankRuehlCLM-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,614 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,614 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Code Pro' (SourceCodePro-SemiboldIt.ttf) italic normal semibold normal>) = 11.24
2020-11-20 10:12:21,614 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal book normal>) = 10.05
2020-11-20 10:12:21,614 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,615 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,615 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
2020-11-20 10:12:21,615 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,615 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal demi normal>) = 10.24
2020-11-20 10:12:21,616 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2020-11-20 10:12:21,616 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal book normal>) = 10.05
2020-11-20 10:12:21,616 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Meiryo' (meiryob.ttc) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,616 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,617 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'TeamViewer12' (teamviewer12.otf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,617 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,617 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,617 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Caladea' (Caladea-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,618 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,618 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,618 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal bold condensed>) = 10.535
2020-11-20 10:12:21,618 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,619 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,619 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,619 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nachlieli CLM' (NachlieliCLM-Light.otf) normal normal light normal>) = 10.24
2020-11-20 10:12:21,619 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,620 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2020-11-20 10:12:21,620 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Sans' (NotoSans-LightItalic.ttf) italic normal light normal>) = 11.24
2020-11-20 10:12:21,620 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2020-11-20 10:12:21,620 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,621 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,621 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,621 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal bold condensed>) = 10.535
2020-11-20 10:12:21,621 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Sans Pro' (SourceSansPro-BoldIt.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,622 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,622 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Miriam Mono CLM' (MiriamMonoCLM-Book.ttf) normal normal book normal>) = 10.05
2020-11-20 10:12:21,622 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,622 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Alef' (Alef-Regular.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,623 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2020-11-20 10:12:21,623 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rubik' (Rubik-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,623 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,623 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,624 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,624 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,624 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,624 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,625 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,625 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Serif' (NotoSerif-Condensed.ttf) normal normal 400 condensed>) = 10.25
2020-11-20 10:12:21,625 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,625 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,626 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal roman normal>) = 10.145
2020-11-20 10:12:21,626 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,626 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Serif Pro' (SourceSerifPro-SemiboldIt.ttf) italic normal semibold normal>) = 11.24
2020-11-20 10:12:21,626 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,627 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,628 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2020-11-20 10:12:21,628 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Sans Arabic' (NotoSansArabic-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,628 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,629 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'David CLM' (DavidCLM-MediumItalic.ttf) italic normal medium normal>) = 11.145
2020-11-20 10:12:21,629 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,629 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,630 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'David CLM' (DavidCLM-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,630 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Amiri' (Amiri-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,630 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,631 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Miriam Libre' (MiriamLibre-Bold.otf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,631 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,631 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
2020-11-20 10:12:21,632 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2020-11-20 10:12:21,632 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Caladea' (Caladea-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,632 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal book normal>) = 11.05
2020-11-20 10:12:21,633 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,633 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,633 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rubik' (Rubik-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,633 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,634 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,634 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,634 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,634 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,635 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,635 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,635 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,635 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
2020-11-20 10:12:21,636 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,636 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Miriam CLM' (MiriamCLM-Book.ttf) normal normal book normal>) = 10.05
2020-11-20 10:12:21,636 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,637 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Serif' (NotoSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,637 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,637 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,637 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Sans' (NotoSans-CondensedBold.ttf) normal normal bold condensed>) = 10.535
2020-11-20 10:12:21,638 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,638 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Linux Libertine G' (LinLibertine_RI_G.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,638 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,639 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Carlito' (Carlito-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,639 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal medium normal>) = 10.145
2020-11-20 10:12:21,639 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,640 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Sans Hebrew' (NotoSansHebrew-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,640 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,640 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,640 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,641 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Linux Biolinum G' (LinBiolinum_RI_G.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,641 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
2020-11-20 10:12:21,641 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'David Libre' (DavidLibre-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,642 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,642 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,642 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,643 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,643 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,643 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,643 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
2020-11-20 10:12:21,644 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2020-11-20 10:12:21,644 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,644 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,645 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Sans Pro' (SourceSansPro-Black.ttf) normal normal black normal>) = 10.525
2020-11-20 10:12:21,645 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal demibold normal>) = 11.24
2020-11-20 10:12:21,645 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
2020-11-20 10:12:21,646 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nachlieli CLM' (NachlieliCLM-BoldOblique.otf) oblique normal bold normal>) = 11.335
2020-11-20 10:12:21,646 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,646 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,646 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,647 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
2020-11-20 10:12:21,647 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,647 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,648 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,648 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2020-11-20 10:12:21,648 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,648 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal book normal>) = 11.05
2020-11-20 10:12:21,649 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,649 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Amiri' (Amiri-Slanted.ttf) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,649 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal book normal>) = 11.05
2020-11-20 10:12:21,649 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Frank Ruhl Hofshi' (FrankRuhlHofshi-Regular.otf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,650 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal bold condensed>) = 10.535
2020-11-20 10:12:21,650 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,650 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal demibold normal>) = 10.24
2020-11-20 10:12:21,650 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,651 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,651 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Sans Georgian' (NotoSansGeorgian-Regular.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,651 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Sans Pro' (SourceSansPro-ExtraLightIt.ttf) italic normal light normal>) = 11.24
2020-11-20 10:12:21,652 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,652 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,652 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,652 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'BIZ UDMincho' (BIZ-UDMinchoM.ttc) normal normal medium normal>) = 10.145
2020-11-20 10:12:21,653 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Serif Pro' (SourceSerifPro-BoldIt.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,653 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,653 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Linux Libertine G' (LinLibertine_RZI_G.ttf) italic normal semibold normal>) = 11.24
2020-11-20 10:12:21,654 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal demi normal>) = 11.24
2020-11-20 10:12:21,654 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal black normal>) = 11.525
2020-11-20 10:12:21,654 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal bold condensed>) = 1.535
2020-11-20 10:12:21,654 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Sans Arabic' (NotoSansArabic-Regular.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,655 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal bold condensed>) = 10.535
2020-11-20 10:12:21,655 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,655 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal demibold normal>) = 10.24
2020-11-20 10:12:21,655 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,656 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,656 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Sans Arabic UI' (NotoSansArabicUI-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,656 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,657 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2020-11-20 10:12:21,657 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,657 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal bold normal>) = 4.971363636363637
2020-11-20 10:12:21,657 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Linux Libertine G' (LinLibertine_RB_G.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,658 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,658 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,658 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Miriam Mono CLM' (MiriamMonoCLM-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-11-20 10:12:21,659 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,659 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
2020-11-20 10:12:21,659 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,660 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal light normal>) = 0.24
2020-11-20 10:12:21,660 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Serif Pro' (SourceSerifPro-Light.ttf) normal normal light normal>) = 10.24
2020-11-20 10:12:21,660 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Miriam Mono CLM' (MiriamMonoCLM-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,661 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Serif Pro' (SourceSerifPro-Bold.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,661 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,661 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Serif Armenian' (NotoSerifArmenian-Regular.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,662 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,662 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,662 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Serif Pro' (SourceSerifPro-BlackIt.ttf) italic normal black normal>) = 11.525
2020-11-20 10:12:21,662 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Noto Serif' (NotoSerif-Regular.ttf) normal normal regular normal>) = 10.05
2020-11-20 10:12:21,663 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,663 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Source Code Pro' (SourceCodePro-BoldIt.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,663 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
2020-11-20 10:12:21,664 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal bold normal>) = 10.335
2020-11-20 10:12:21,664 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Frank Ruehl CLM' (FrankRuehlCLM-Medium.ttf) normal normal medium normal>) = 10.145
2020-11-20 10:12:21,664 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2020-11-20 10:12:21,664 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,665 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-11-20 10:12:21,665 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal medium condensed>) = 10.344999999999999
2020-11-20 10:12:21,665 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'MS Mincho' (msmincho.ttc) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,666 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
2020-11-20 10:12:21,666 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Amiri Quran' (amiri-quran.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,666 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal book normal>) = 11.05
2020-11-20 10:12:21,666 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,667 [1448] DEBUG    matplotlib.font_manager:1258: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2020-11-20 10:12:21,667 [1448] DEBUG    matplotlib.font_manager:1281: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('Y:\\Users\\awyeh\\anaconda3\\envs\\learn-env\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
